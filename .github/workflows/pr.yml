on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

name: Pull Request

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: ./.github/actions/setup-bun
      - uses: ./.github/actions/build
      - uses: ./.github/actions/prevent-uncommit-changes
      
      - name: Run linting
        run: bun run lint
      
      - name: Run type checking
        run: bun run typecheck
      
      - name: Run unit tests
        run: bun run test:unit
      
      - name: Run BDD tests
        run: bun run test:bdd
        continue-on-error: true
        id: bdd-tests
      
      - name: Comment BDD test status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🧪 BDD Test Status')
            );
            
            const bddStatus = '${{ steps.bdd-tests.outcome }}';
            const statusEmoji = bddStatus === 'success' ? '✅' : '❌';
            const statusText = bddStatus === 'success' ? 'All BDD tests passing!' : 'BDD tests failing (expected during development)';
            
            const body = `🧪 **BDD Test Status** ${statusEmoji}
            
            ${statusText}
            
            _This comment will be updated on each push._`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  pr-ready-check:
    runs-on: ubuntu-latest
    needs: [pr-checks]
    if: always()
    steps:
      - name: Check if PR is ready
        run: |
          if [[ "${{ needs.pr-checks.result }}" == "success" ]]; then
            echo "✅ PR is ready for merge"
          else
            echo "❌ PR has failing checks"
            exit 1
          fi